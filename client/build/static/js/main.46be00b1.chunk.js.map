{"version":3,"sources":["pages/Card.js","pages/Tweets.js","pages/AICard.js","pages/AdminCard.js","pages/AITweets.js","pages/TopicCard.js","pages/Curate.js","pages/Topic.js","pages/Examples.js","pages/Admin.js","App.js","index.js"],"names":["Card","props","date","Date","tweet","CreatedDate","toLocaleDateString","React","useState","isDeleted","setIsDeleted","setIsTagAdded","errmessage","setErrmessage","tag","setTag","ratio","like_count","impression_count","toFixed","ratio1","reply_count","color","baseURL","process","id","fetch","method","headers","body","JSON","stringify","dbid","req","json","status","errormessage","className","style","retweet_count","quote_count","onClick","deleteTweet","type","maxLength","required","placeholder","onChange","e","target","value","AddTag","disabled","href","tweetID","rel","TwitteruserFullName","require","config","Tweets","history","useHistory","tweets","setTweets","twitterUserID","settwitterUserID","disable","setDisable","handle","setHandle","userName","setUserName","setErrormessage","event","preventDefault","localStorage","getItem","tweeterUserHadleToPullTweets","data","obj","i","_id","TwitteruserName","prevArray","length","ReactGA","category","action","error","exception","description","fatal","useEffect","params","URLSearchParams","append","delete","push","search","toString","onSubmit","map","index","Helmet","charSet","newAITweet","setNewAITweet","disable1","setDisable1","neednewAITweetforthisTweet","newAItweet","GenerateAITweet","navigator","clipboard","writeText","AdminCard","chooseHandle","admin","SelectDiv","AITweets","setAdmin","AdminArray","curationstatus","Admin","TopicCard","topictopull","chooseTopic","SelectDiv1","topic","Curate","setTopic1","tagtopullTweets","setTagtopullTweets","buttondisable","setButtondisable","buttondisable1","setButtondisable1","tokens","setTokens","tokensused","TopicArray","z","topicToPullTweets","Topic","topictopulltweets","initialize","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46be00b1.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default function Card(props) {\n\n    let date = new Date(props.tweet.CreatedDate).toLocaleDateString();\n\n    const [isDeleted, setIsDeleted] = React.useState(false);\n    const [isTagAdded, setIsTagAdded] = React.useState(false);\n    const [errmessage, setErrmessage] = React.useState(\"\");\n    const [tag, setTag] = React.useState();\n\n\n// if either likes or impressions are 0, then ratio is 0 otherwise ratio is likes/impressions\n    let ratio = props.tweet.like_count>0 && props.tweet.impression_count>0 ? ((props.tweet.like_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let ratio1 = props.tweet.reply_count>0 && props.tweet.impression_count>0 ? ((props.tweet.reply_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let color = \"#38761d\";\n\n    if(ratio>2){\n        color = \"#6aa84f\";\n    }\n    if(ratio>=1 && ratio<2){\n        color = \"#cc6600\";\n    }\n    if(ratio<1){\n        color = \"#ff0000\";\n    }\n\n    const baseURL = process.env.REACT_APP_BASE_URL;\n    async function deleteTweet(id) {\n        \n\t\tconst req = await fetch(`${baseURL}/api/deleteTweet`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t// 'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tdbid: id,\n\t\t\t}),\n\n\t\t})\n        const data = await req.json()\n\t\tif (data.status === 'ok') {\n            setIsDeleted(!isDeleted);\n            setErrmessage(errormessage => \"Tweet Deleted\");\n            // console.log(\"isDeleted is okkkk\", isDeleted, \"data is \", data);\n\n        } else {\n            setIsDeleted(isDeleted);\n            setErrmessage(errormessage => \"Tweet not Deleted\");\n            // console.log(\"isDeleted is errrorrr\", isDeleted);\n        }\n    }\n\n    async function AddTag(id) {\n\n\t\tconst req = await fetch(`${baseURL}/api/addtag`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t// 'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tdbid: id,\n                tag:tag\n\t\t\t}),\n\n\t\t})\n        const data = await req.json()\n\t\tif (data.status === 'ok') {\n            setIsTagAdded(!setIsTagAdded);\n            setErrmessage(errormessage => \"Tag Added\");\n            setTag(tag => \"\");\n\n        } else {\n            setIsTagAdded(setIsTagAdded);\n            setErrmessage(errormessage => \"Tag not added\");\n            setTag(tag => \"\");\n        }\n    }\n\n    return (\n        <div className=\"card\">\n          {!isDeleted &&  <div className=\"card-body\">\n\n              {props.tweet && <h5 className=\"card-text\"><span style={{color: `#808080`}}>Created Date - </span>{date}</h5>}\n              {props.tweet && <h5 className=\"card-title\"><span style={{color: `#808080`}}>Tweet - </span>{props.tweet.tweet}</h5>}\n              {props.tweet && <hr/>}\n              {props.tweet && <p className=\"card-text\"><span style={{color: `${color}`}}>{ `Likes/Views - ${ratio}% | Replies/Views - ${ratio1}% `}</span> { ` | Views - ${props.tweet.impression_count} | Likes - ${props.tweet.like_count} | Replies - ${props.tweet.reply_count} | Retweets - ${props.tweet.retweet_count} | Q Tweets - ${props.tweet.quote_count}`}</p>}\n               {/* {props.tweet.tweetSentiment &&  <h6 className=\"card-text\">{`New Tweet for you - ${props.tweet.tweetSentiment}`}</h6>} */}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet for you </span></h6>} */}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet by AI - </span>{`  ${props.tweet.newtweet}`}</h6>} */}\n               {/* {props.tweet.newtweet && <button className=\"copybutton\" onClick={() => {navigator.clipboard.writeText(props.tweet.newtweet);}}>Copy Tweet</button>} */}\n               {props.tweet && <button className=\"copybutton\" onClick={() => deleteTweet(props.tweet.dbid)}>Delete Tweet</button>}\n               <br/>\n               <br/>\n               {errmessage && <h4 className=\"errormessagesmall\">{`${errmessage}`}</h4>}\n                <h4 className=\"\">{`${props.tweet.tag}`}</h4>\n                <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='tagTextBox'\n\t\t\t\t\tmaxLength={25}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Add Tag\"\n\t\t\t\t\tonChange={(e) => setTag(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<br/>\n               {props.tweet && <button className=\"copybutton\" onClick={() => AddTag(props.tweet.dbid)} disabled={!tag}>Add Tag</button>}\n               <br/>\n               <br/>\n               {props.tweet &&<a className=\"Tweetlink\" href={`${props.tweet.tweetID}`} target=\"_blank\" rel=\"noreferrer\">View this Tweet by {`${props.tweet.TwitteruserFullName} on Twitter`}</a>} \n\n            </div>}\n            {/* {ratio>1 &&  <h2 className='card-title'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">BUILD & MONETIZE YOUR TWITTER AUDIENCE. FAST. Click here</a></h2>} */}\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport { Helmet } from 'react-helmet';\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Tweets = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t\n\t// useEffect(() => {\n\t// \tconst token = localStorage.getItem('token')\n\t\t\n\t// \t// https://mudit.hashnode.dev/5-things-you-should-know-about-useeffect\n\t// \tif (token) {\n\t// \t\tconst user = jwt.decode(token)\n\t// \t\tif (!user) {\n\t// \t\t\tconsole.log('no user')\n\t// \t\t\tlocalStorage.removeItem('token')\n\t// \t\t\thistory.replace('/login')\n\t\t\t\t\n\t// \t\t} else {\n\t// \t\t\t// populateQuote()do something //cleanup function\n\t// \t\t\t// console.log('user is ', user)\n\t// \t\t}\n\t// \t}else{\n\t// \t\thistory.replace('/login')\n\t// \t}\n\n\t// },[])\n\tuseEffect(() => {\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"h\", handle)\n\t\t} else {\n\t\t  params.delete(\"h\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/tweets`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\t// console.log('data is ', data)\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdbid:data.tweets[i]._id,\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets[i].TwitteruserName,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\ttag: data.tweets[i].tag,\n\t\t\t\t\tCreatedDate: data.tweets[i].CreatedDate,\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets[0].TwitteruserName);\n\t\t\t\tsetUserName(userName => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\t\n\t\t\t\t\n              }\n\t\t\t  ReactGA.event({\n\t\t\t\tcategory: 'Pull Tweets',\n\t\t\t\taction: 'Tweets were pulled'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst handleClick = event => {\n\n\t\tconsole.log('button disabled');\n\t  };\n\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI - PULL TWEETS</h1>\n\t\t\t{/* <h2 className='mainsubtitle'>Analyse user's last few Tweets, and write new Tweets in the same style</h2> */}\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2 className='mainsubtitle'><a href=\"/curate\">Curate Tweets here</a></h2>\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h6>Analysis and new Tweet genaration may take few seconds..Please wait..</h6>}\n\t\t\t<br/>\n\t\t\t{disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>}\n\t\t\t<br/>\n\t\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t{/* {handle && <h6><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h6>} */}\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\t\t\n\t\t<Helmet>\n          {handle && <title>{`GALAXZAI @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t</Helmet>\n\n\t\t</div>\n\t)\n}\n\nexport default Tweets\n\n","import React from \"react\";\n\n\nexport default function Card(props) {\n\n    const [newAITweet, setNewAITweet] = React.useState();\n    const [errmessage, setErrmessage] = React.useState(\"\");\n    const [disable, setDisable] = React.useState(false);\n    const [disable1, setDisable1] = React.useState(false);\n\n\n// if either likes or impressions are 0, then ratio is 0 otherwise ratio is likes/impressions\n    let ratio = props.tweet.like_count>0 && props.tweet.impression_count>0 ? ((props.tweet.like_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let ratio1 = props.tweet.reply_count>0 && props.tweet.impression_count>0 ? ((props.tweet.reply_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let color = \"#38761d\";\n\n    if(ratio>2){\n        color = \"#6aa84f\";\n    }\n    if(ratio>=1 && ratio<2){\n        color = \"#cc6600\";\n    }\n    if(ratio<1){\n        color = \"#ff0000\";\n    }\n\n    const baseURL = process.env.REACT_APP_BASE_URL;\n    async function GenerateAITweet(neednewAITweetforthisTweet,dbid) {\n        setDisable(true);\n        setDisable1(true);\n\t\tconst req = await fetch(`${baseURL}/api/GenerateAITweet`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t// 'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tneednewAITweetforthisTweet: neednewAITweetforthisTweet,\n                dbid:dbid\n\t\t\t}),\n\n\t\t})\n        const data = await req.json()\n\t\tif (data.status === 'ok') {\n\n            setNewAITweet(newAITweet => data.newAItweet);\n            setDisable1(false);\n            // setErrmessage(errormessage => \"Tweet generated\");\n            // console.log(\"isDeleted is okkkk\", isDeleted, \"data is \", data);\n\n        } else {\n\n            setErrmessage(errormessage => \"Tweet Generation failed\");\n            setDisable(false);\n            setDisable1(false);\n            // console.log(\"isDeleted is errrorrr\", isDeleted);\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n\n              {/* {props.tweet && <h5 className=\"card-text\"><span style={{color: `#808080`}}>Created Date - </span>{props.tweet.CreatedDate}</h5>} */}\n              {props.tweet && <h5 className=\"card-title\"><span style={{color: `#808080`}}>Tweet - </span>{props.tweet.tweet}</h5>}\n              {props.tweet && <hr/>}\n              {props.tweet && <p className=\"card-text\"><span style={{color: `${color}`}}>{ `Likes/Views - ${ratio}% | Replies/Views - ${ratio1}% `}</span> { ` | Views - ${props.tweet.impression_count} | Likes - ${props.tweet.like_count} | Replies - ${props.tweet.reply_count} | Retweets - ${props.tweet.retweet_count} | Q Tweets - ${props.tweet.quote_count}`}</p>}\n               {/* {props.tweet.tweetSentiment &&  <h6 className=\"card-text\">{`New Tweet for you - ${props.tweet.tweetSentiment}`}</h6>} */}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet for you </span></h6>} */}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet by AI - </span>{`  ${props.tweet.newtweet}`}</h6>} */}\n               {/* {props.tweet.newtweet && <button className=\"copybutton\" onClick={() => {navigator.clipboard.writeText(props.tweet.newtweet);}}>Copy Tweet</button>} */}\n               {/* {props.tweet && <button value={disable ? `Analysing...` : `Get AI Tweet`} type= \"submit\" className=\"button\" onClick={() => GenerateAITweet(props.tweet.tweet)} disabled={disable} >fsdfdsa</button>} */}\n               <br/>\n               {props.tweet && <input onClick={() => GenerateAITweet(props.tweet.tweet,props.tweet.dbid)} className='copybutton' value={disable1 ? `Generating...` : `Generate AI Tweet` } disabled={disable}/>}\n               <br/>\n               <br/>\n               {newAITweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet by AI - </span>{`  ${newAITweet}`}</h6>}\n               {errmessage && <h4 className=\"errormessage\">{`${errmessage}`}</h4>}\n                {newAITweet && <button className=\"copybutton\" onClick={() => {navigator.clipboard.writeText(newAITweet);}} >Copy AI Tweet</button>}\n               <br/>\n               <br/>\n               {props.tweet &&<a className=\"Tweetlink\" href={`${props.tweet.tweetID}`} target=\"_blank\" rel=\"noreferrer\">View this Tweet by {`${props.tweet.TwitteruserFullName} on Twitter`}</a>} \n\n            </div>\n            {/* {ratio>1 &&  <h2 className='card-title'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">BUILD & MONETIZE YOUR TWITTER AUDIENCE. FAST. Click here</a></h2>} */}\n        </div>\n    );\n}\n\n","import React from \"react\";\nimport { useEffect } from 'react';\n\n\nexport default function AdminCard(props) {\n\n    const [disable, setDisable] = React.useState(false);\n\n\n    async function SelectDiv ( handle){\n\n        setDisable(true);\n        props.chooseHandle(handle); //pass handle back to parent component\n        \n    }\n\n    return (\n\n        <div id={props.admin} className={!disable ? 'admincard' : 'admincardselected'} onClick={() => {SelectDiv(props.admin)}} >\n       \n              {props.admin && <p className=\"card-text\"><span style={{color: `#808080`}}>  </span>@{props.admin}</p>}\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './AICard'\nimport AdminCard from './AdminCard'\nimport ReactGA from 'react-ga';\nimport { Helmet } from 'react-helmet';\nrequire('dotenv').config();\n\nReactGA.event({\n\tcategory: 'AI Tweets',\n\taction: 'AI Tweets Page Viewed'\n  });\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst AITweets = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [disable1, setDisable1] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\tconst [admin, setAdmin] = useState([])\n\n\t\n\tuseEffect(() => {\n\t\tAdmin();\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"h\", handle)\n\t\t} else {\n\t\t  params.delete(\"h\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\t\n\tasync function Admin(event) {\n\t\t\n\t\t// setAdmin(admin => []);\n\t\t// setDisable1(false);\n\n\t\tconst req = await fetch(`${baseURL}/api/admin`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tsetAdmin(admin => []); //clear them first\n\n\t\tfor (let i=0;i<data.AdminArray.length;i++){ \n\t\t\n\t\t\tsetAdmin(prevArray => [...prevArray, data.AdminArray[i]])\n\n\t\t}\n\t\tsetDisable1(true);\n\t} }  \n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\t\tsettwitterUserID(twitterUserID => \"\");\n\t\t\n\n\t\tconst req = await fetch(`${baseURL}/api/ShowTweets`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdbid:data.tweets[i]._id,\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets[i].TwitteruserName,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\tcurationstatus: data.tweets[i].curationstatus,\n\t\t\t\t\tCreatedDate: data.tweets[i].CreatedDate,\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets[0].TwitteruserName);\n\t\t\t\tsetUserName(userName => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\t\n\t\t\t\t\n              }\n\t\t\t  ReactGA.event({\n\t\t\t\tcategory: 'AI Tweets',\n\t\t\t\taction: 'An AI Tweet Generated'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\t\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on AI Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst chooseHandle = (twitterUserID) => {\n\t\tsettwitterUserID(twitterUserID); // id passed back from chile component\n\t  };\n\n\t\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Find new Tweet inspiration by analysing user's last few Tweets, and write new Tweets with AI in the same style.</h2>\n\t\t\t<h3 className='mainsubtitle'>Looking at great content inspires you to write better content, faster.</h3>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2 className='mainsubtitle'><a className='mainsubtitlelink' href=\"/topic\">Search Twitter Topics here</a></h2>\n\t\t\t {!disable1 && <h6>Pulling Twitter users...Please wait..</h6>}\n\n\t\t\t<div className='admincardmain'>\n\t\t\t {admin.map((admin,index,) => {\n\t\t\t\treturn <AdminCard \n\t\t\t\tadmin={admin}  key={index} chooseHandle={chooseHandle}\n\t\t\t\t// onChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t</div>\n\n\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t{/* <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/> */}\n\t\t\t\t <input type=\"hidden\" value={settwitterUserID} />\n\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={!twitterUserID}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h6>Analysis and new Tweet genaration may take few seconds..Please wait..</h6>}\n\t\t\t<br/>\n\t\t\t{disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>}\n\t\t\t<br/>\n\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t\n\t\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\t\n\n\n\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\t\t\n\t\t<Helmet>\n          {handle && <title>{`GALAXZAI @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t</Helmet>\n\n\t\t</div>\n\t)\n}\n\nexport default AITweets\n\n","import React from \"react\";\nimport { useEffect } from 'react';\n\n\nexport default function TopicCard(props) {\n\n    const [disable1, setDisable1] = React.useState(false);\n\n\n    async function SelectDiv1 ( topictopull){\n\n        setDisable1(true);\n        props.chooseTopic(topictopull); //pass handle back to parent component\n        \n    }\n\n    return (\n\n        <div className={!disable1 ? 'admincard' : 'admincardselected'} onClick={() => {SelectDiv1(props.topic)}} >\n       \n              {props.topic && <p className=\"card-text\"><span style={{color: `#808080`}}>  </span>#{props.topic}</p>}\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport { Helmet } from 'react-helmet';\nimport AdminCard from './AdminCard'\nimport TopicCard from './TopicCard'\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Curate = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(true);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\tconst [admin, setAdmin] = useState([]);\n\tconst [topic, setTopic1] = useState([]);\n\tconst [tagtopullTweets, setTagtopullTweets] = useState('')\n\tconst [disable1, setDisable1] = React.useState(true);\n\tconst [buttondisable, setButtondisable] = React.useState(false);\n\tconst [buttondisable1, setButtondisable1] = React.useState(false);\n\tconst [tokens, setTokens] = useState([])\n\n\t// },[])\n\tuseEffect(() => {\n\t\tAdmin();\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"h\", handle)\n\t\t} else {\n\t\t  params.delete(\"h\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\tasync function Admin(event) {\n\t\t\n\t\t// setAdmin(admin => []);\n\n\n\t\tconst req = await fetch(`${baseURL}/api/admin`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tsetAdmin(admin => []); //clear them first\n\t\t\tsetTopic1(topic => []); //clear them first\n\t\t\tsetTokens(tokens => data.tokensused);\n\n\t\tfor (let i=0;i<data.AdminArray.length;i++){ \n\t\t\n\t\t\tsetAdmin(prevArray => [...prevArray, data.AdminArray[i]])\n\t\t\t\n\t\t}\n\n\t\tfor (let z=0;z<data.TopicArray.length;z++){ \n\t\t\n\t\t\tsetTopic1(prevArray => [...prevArray, data.TopicArray[z]])\n\t\t\t\n\t\t}\n\t\t\n\t\tsetDisable(true);\n\t\tsetDisable1(true);\n\t} }   \n\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetButtondisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/curate`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t\ttopicToPullTweets:\"null\"\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\t// console.log('data is ', data)\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdbid:data.tweets[i]._id,\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets[i].TwitteruserName,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\ttag: data.tweets[i].tag,\n\t\t\t\t\tCreatedDate: data.tweets[i].CreatedDate,\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\tsetButtondisable(false);\n\t\t\t\tsetHandle(handle => data.tweets[0].TwitteruserName);\n\t\t\t\tsetUserName(userName => data.tweets[0].TwitteruserFullName);\n\n\t\t\t\t\n              }\n\t\t\t  ReactGA.event({\n\t\t\t\tcategory: 'Curate',\n\t\t\t\taction: 'Curate page used'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\t\n\n\t\n\tasync function GetTopicTweets(event) {\n\tevent.preventDefault()\n\tsetButtondisable1(true);\n\tsetTweets(tweets => []);\n\tsetHandle(handle => \"\");\n\tsetErrormessage(errormessage => \"\");\n\n\tconst req = await fetch(`${baseURL}/api/curate`, {\n\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\ttweeterUserHadleToPullTweets: \"null\",\n\t\t\ttopicToPullTweets:tagtopullTweets\n\t\t}),\n\n\t})\n\n\tconst data = await req.json()\n\tif (data.status === 'ok') {\n\t\t// console.log('data is ', data)\n\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\tconst obj = {\n\t\t\t\tdbid:data.tweets[i]._id,\n\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\tTwitteruserName: data.tweets[i].TwitteruserName,\n\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\ttag: data.tweets[i].tag,\n\t\t\t\tCreatedDate: data.tweets[i].CreatedDate,\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\tsetButtondisable1(false);\n\t\t\tsetHandle(handle => data.tweets[0].tag);\n\t\t\tsetUserName(userName => data.tweets[0].tag);\n\n\t\t\t\n\t\t\t}\n\t\t\tReactGA.event({\n\t\t\tcategory: 'Curate',\n\t\t\taction: 'Curate page used'\n\t\t\t});\n\t} \n\telse if(data.status === 'error'){\n\t\tsetDisable(false);\n\t\tsetErrormessage(userName => data.error);\n\t\tReactGA.exception({\n\t\t\tdescription: 'An error ocurred on Tweets page',\n\t\t\tfatal: true\n\t\t\t});\n\t}\n\t}\n\n\tconst chooseTopic = (topictopull) => {\n\t\tsetDisable1(false);\n\t\tsetTagtopullTweets(topictopull); // id passed back from chile component\n\t};\n\tconst chooseHandle = (twitterUserID) => {\n\t\tsetDisable(false);\n\t\tsettwitterUserID(twitterUserID); // id passed back from chile component\n\t};\n\t\n\t  return (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI - ADMIN CURATE</h1>\n\t\t\t{/* <h2 className='mainsubtitle'>Analyse user's last few Tweets, and write new Tweets in the same style</h2> */}\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2 className='mainsubtitle'><a href=\"/tweets\">Pull Tweets here</a></h2>\n\t\t\t \n\t\t\t {!disable1 && <h6>Pulling Twitter users...Please wait..</h6>}\n\t\t\t{tokens && <h6>Total Tokens used - {tokens}</h6>}\n\n\t\t\t <div className='admincardmain'>\n\t\t\t {admin.map((admin,index,) => {\n\t\t\t\treturn <AdminCard \n\t\t\t\tadmin={admin}  key={index} chooseHandle={chooseHandle}\n\t\t\t\t// onChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t</div>\n\n\n\t\t\t\n\n\t\t\t\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t{/* <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\t// required\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/> */}\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={buttondisable ? `Getting...` : `Get User Tweets` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t<br/>\n\t\t\t<div className='admincardmain'>\n\t\t\t {topic.map((topic,index,) => {\n\t\t\t\treturn <TopicCard \n\t\t\t\ttopic={topic}  key={index} chooseTopic={chooseTopic}\n\t\t\t\t// onChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t</div>\n\n\t\t\t<form onSubmit={GetTopicTweets}>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={buttondisable1 ? `Getting...` : `Get Topic Tweets` } disabled={disable1}/>\n\t\t\t\t\n\t\t\t</form>\n\n\t\t\t{/* {disable && <h6>Analysis and new Tweet genaration may take few seconds..Please wait..</h6>} */}\n\t\t\t<br/>\n\t\t\t{/* {disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>} */}\n\t\t\t<br/>\n\t\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t{/* {handle && <h6><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h6>} */}\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\t\t\n\t\t<Helmet>\n          {handle && <title>{`GALAXZAI @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t</Helmet>\n\n\t\t</div>\n\t)\n}\n\nexport default Curate\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './AICard'\nimport AdminCard from './AdminCard'\nimport ReactGA from 'react-ga';\nimport { Helmet } from 'react-helmet';\nrequire('dotenv').config();\n\nReactGA.event({\n\tcategory: 'AI Tweets',\n\taction: 'AI Tweets Page Viewed'\n  });\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Topic = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [disable1, setDisable1] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\tconst [admin, setAdmin] = useState([])\n\n\t\n\tuseEffect(() => {\n\t\tAdmin();\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"h\", handle)\n\t\t} else {\n\t\t  params.delete(\"h\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\t\n\tasync function Admin(event) {\n\t\t\n\t\t// setAdmin(admin => []);\n\t\t// setDisable1(false);\n\n\t\tconst req = await fetch(`${baseURL}/api/admin`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tsetAdmin(admin => []); //clear them first\n\n\t\tfor (let i=0;i<data.TopicArray.length;i++){ \n\t\t\n\t\t\tsetAdmin(prevArray => [...prevArray, data.TopicArray[i]])\n\n\t\t}\n\t\tsetDisable1(true);\n\t} }  \n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\t\tsettwitterUserID(twitterUserID => \"\");\n\t\t\n\n\t\tconst req = await fetch(`${baseURL}/api/GetTweetsOnTopic`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttopictopulltweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\tdbid:data.tweets[i]._id,\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets[i].TwitteruserName,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\tcurationstatus: data.tweets[i].curationstatus,\n\t\t\t\t\tCreatedDate: data.tweets[i].CreatedDate,\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets[0].tag);\n\t\t\t\tsetUserName(userName => data.tweets[0].tag);\n\t\t\t\tsetDisable(false);\t\n\t\t\t\t\n              }\n\t\t\t  ReactGA.event({\n\t\t\t\tcategory: 'AI Tweets',\n\t\t\t\taction: 'An AI Tweet Generated'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\t\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on AI Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst chooseHandle = (twitterUserID) => {\n\t\tsettwitterUserID(twitterUserID); // id passed back from chile component\n\t  };\n\n\t\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Find new Tweet inspiration by analysing user's last few Tweets, and write new Tweets with AI in the same style.</h2>\n\t\t\t<h3 className='mainsubtitle'>Looking at great content inspires you to write better content, faster.</h3>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2 className='mainsubtitle'><a className='mainsubtitlelink' href=\"/\">Search Twitter Users here</a></h2>\n\t\t\t {!disable1 && <h6>Pulling Twitter users...Please wait..</h6>}\n\n\t\t\t<div className='admincardmain'>\n\t\t\t {admin.map((admin,index,) => {\n\t\t\t\treturn <AdminCard \n\t\t\t\tadmin={admin}  key={index} chooseHandle={chooseHandle}\n\t\t\t\t// onChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t</div>\n\n\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t{/* <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/> */}\n\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={!twitterUserID}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h6>Analysis and new Tweet genaration may take few seconds..Please wait..</h6>}\n\t\t\t<br/>\n\t\t\t{disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>}\n\t\t\t<br/>\n\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`#${handle}`}</h4>}\n\t\t\t\n\t\t\t</div>\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\t\t\n\t\t<Helmet>\n          {handle && <title>{`GALAXZAI @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t</Helmet>\n\n\t\t</div>\n\t)\n}\n\nexport default Topic\n\n","import React, { useEffect, useState } from 'react'\n// import jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport NavBar from './Navbar';\nimport { Helmet } from 'react-helmet';\n\n\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\n\nconst Examples = () => {\n\t// const history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\t// const [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState(\"\");\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\tconst history = useHistory()\n\n\t// useEffect(() => {\n\t// \t// const token = localStorage.getItem('token')\n\t\t\n\t// \tGetTweets();\n\t// \t// if (token) {\n\t// \t// \tconst user = jwt.decode(token)\n\t// \t// \tif (!user) {\n\t// \t// \t\tconsole.log('no user')\n\t// \t// \t\tlocalStorage.removeItem('token')\n\t// \t// \t\thistory.replace('/login')\n\t\t\t\t\n\t// \t// \t} else {\n\t// \t// \t\t// populateQuote()do something\n\t// \t// \t\t// console.log('user is ', user)\n\t// \t// \t}\n\t// \t// }else{\n\t// \t// \thistory.replace('/login')\n\t// \t// }\n\n\t// }), []\n\n\t//update the url after every new handle\n\tuseEffect(() => {\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"h\", handle)\n\t\t} else {\n\t\t  params.delete(\"h\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetErrormessage(errormessage => \"\");\n\t\t\n\t\tconst req = await fetch(`${baseURL}/api/examples`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\t\t\t\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\t\tsetTweets(tweets => []); //clear them first\n\t\t\t\tsetUserName(userName => \"\");\n\t\t\t\tsetHandle(handle => \"\");\n\n\t\t\tfor (let i=0;i<data.tweets.AllAboutTweetsArray.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\ttweetID: data.tweets.AllAboutTweetsArray[i].tweetID,\n\t\t\t\t\ttweet: data.tweets.AllAboutTweetsArray[i].tweet,\n\t\t\t\t\ttweetSentiment: data.tweets.AllAboutTweetsArray[i].tweetSentiment,\n\t\t\t\t\timpression_count: data.tweets.AllAboutTweetsArray[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets.AllAboutTweetsArray[i].like_count,\n\t\t\t\t\treply_count: data.tweets.AllAboutTweetsArray[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets.AllAboutTweetsArray[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets.AllAboutTweetsArray[i].retweet_count,\n\t\t\t\t\tnewtweet: data.tweets.AllAboutTweetsArray[i].newtweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets.AllAboutTweetsArray[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets.TwitteruserName,\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n            }\n\t\t\t\tsetHandle(handle => data.tweets.TwitteruserName);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsetUserName(userName => data.tweets.AllAboutTweetsArray[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\n\t\t\t\t\n\n\t\t\tReactGA.event({\n\t\t\t\tcategory: 'Examples',\n\t\t\t\taction: 'An Example Viewed'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on examples page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\n\t\t  \n\t}\n\n\t\n\n\treturn (\n\t\t\n\t\t<div className='tweetdiv'>\n\t\t\t{/* <NavBar sticky=\"top\" /> */}\n\t\t<div className='header'>\n\t\t\t<br/>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Analyse user's last few Tweets, and write new Tweets in the same style</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `      Analysing...      ` : `  Show  Examples   ` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h6>Analysis and new Tweet genaration may take few seconds..Please wait..</h6>}\n\t\t\t{!disable && <h6>Click again to see another example</h6>}\n\t\t\t{/* {!handle && <h6>Please wait..</h6>} */}\n\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t\n\t\t\t<h2 className='mainsubtitle'><a href=\"/tweets\">Analyse other Twitter accounts here</a></h2>\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t\n\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\n\t\t<Helmet>\n          {handle && <title>{`GALAXZAI @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t </Helmet>\n\t\t \n\t\t</div>\n\t)\n}\n\nexport default Examples\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport AdminCard from './AdminCard'\nimport ReactGA from 'react-ga';\nrequire('dotenv').config();\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Admin = () => {\n\tconst history = useHistory()\n\tconst [admin, setAdmin] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [length, setLength] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t\n\n\n\t// useEffect(() => {\n\t// \tconst token = localStorage.getItem('token')\n\t\t\n\t// \t// https://mudit.hashnode.dev/5-things-you-should-know-about-useeffect\n\t// \tif (token) {\n\t// \t\tconst user = jwt.decode(token)\n\t// \t\tif (!user) {\n\t// \t\t\tconsole.log('no user')\n\t// \t\t\tlocalStorage.removeItem('token')\n\t// \t\t\thistory.replace('/login')\n\t\t\t\t\n\t// \t\t} else {\n\t// \t\t\t// populateQuote()do something //cleanup function\n\t// \t\t\t// console.log('user is ', user)\n\t// \t\t}\n\t// \t}else{\n\t// \t\thistory.replace('/login')\n\t// \t}\n\n\t// },[])\n\n\tasync function Admin(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetAdmin(admin => []);\n\t\tsetLength(length => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/admin`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tsetAdmin(admin => []); //clear them first\n\t\t\tsetLength(length => \"\");\n\t\t\tsetHandle(handle => \"\");\n\n\t\tfor (let i=0;i<data.AdminArray.length;i++){ \n\t\t\n\t\t\tsetAdmin(prevArray => [...prevArray, data.AdminArray[i]])\n\t\t\tsetDisable(false);\n\t\t}\n\t\tsetLength(length => data.AdminArray.length);\n\n\n\t\tReactGA.event({\n\t\t\tcategory: 'Admin',\n\t\t\taction: 'Admin Page Viewed'\n\t\t  });\n\t}  \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(errormessage => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Admin page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst handleClick = event => {\n\n\t\tconsole.log('button disabled');\n\t  };\n\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Admin</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t<form onSubmit={Admin}>\n\t\t\t\t{/* <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/> */}\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{length && <h4 className=\"mainsubtitle\">{`Total records - ${length}`}</h4>}\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t{admin.map((admin,index) => {\n\t\t\t\treturn <AdminCard \n\t\t\t\tadmin={admin}  key={index}\n\t\t\t\tonChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Admin\n\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n// import Login from './pages/Login'\n// import Register from './pages/Register'\nimport Tweets from './pages/Tweets'\nimport AITweets from './pages/AITweets'\nimport Curate from './pages/Curate'\nimport Topic from './pages/Topic'\nimport Examples from './pages/Examples'\nimport Admin from './pages/Admin'\n\nimport ReactGA from 'react-ga';\n\nconst MEASUREMENT_ID = \"G-N2T7DHCCBJ\"; // YOUR_OWN_TRACKING_ID\nconst TRACKIING_ID = \"UA-250139782-1\";\nReactGA.initialize(TRACKIING_ID);\n\n\n\nconst App = () => {\n\treturn (\n\t\t<div className='maindiv'>\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* <Route path=\"/login\" exact component={Login} /> */}\n\t\t\t\t{/* <Route path=\"/register\" exact component={Register} /> */}\n\t\t\t\t<Route path=\"/tweets\" exact component={Tweets} />\n\t\t\t\t<Route path=\"/\" exact component={AITweets} />\n\t\t\t\t<Route path=\"/topic\" exact component={Topic} />\n\t\t\t\t<Route path=\"/curate\" exact component={Curate} />\n\n\t\t\t\t{/* <Route path=\"/admin\" exact component={Admin} /> */}\n\t\t\t\t{/* <Route path=\"/examples\" exact component={Examples} /> */}\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n//todo\n//filtering tweets for \"\" and ' does not work\n// pull data based on url query string"],"sourceRoot":""}