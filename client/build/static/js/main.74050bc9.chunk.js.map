{"version":3,"sources":["pages/Card.js","pages/Tweets.js","pages/Examples.js","pages/AdminCard.js","pages/Admin.js","App.js","index.js"],"names":["Card","props","ratio","tweet","like_count","impression_count","toFixed","ratio1","reply_count","color","className","style","retweet_count","quote_count","tweetSentiment","newtweet","onClick","navigator","clipboard","writeText","href","tweetID","target","rel","TwitteruserFullName","require","config","baseURL","process","Tweets","history","useHistory","useState","tweets","setTweets","twitterUserID","settwitterUserID","React","disable","setDisable","handle","setHandle","userName","setUserName","errormessage","setErrormessage","event","preventDefault","fetch","method","headers","localStorage","getItem","body","JSON","stringify","tweeterUserHadleToPullTweets","req","json","data","status","obj","i","prevArray","length","ReactGA","category","action","error","exception","description","fatal","useEffect","params","URLSearchParams","append","delete","push","search","toString","onSubmit","type","maxLength","required","placeholder","onChange","e","value","disabled","map","index","Helmet","charSet","Examples","AllAboutTweetsArray","TwitteruserName","AdminCard","admin","Admin","setAdmin","setLength","AdminArray","initialize","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74050bc9.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default function Card(props) {\n\n\n// if either likes or impressions are 0, then ratio is 0 otherwise ratio is likes/impressions\n    let ratio = props.tweet.like_count>0 && props.tweet.impression_count>0 ? ((props.tweet.like_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let ratio1 = props.tweet.reply_count>0 && props.tweet.impression_count>0 ? ((props.tweet.reply_count/props.tweet.impression_count)*100).toFixed(2): 0 ;\n    let color = \"#38761d\";\n\n    if(ratio>2){\n        color = \"#6aa84f\";\n    }\n    if(ratio>=1 && ratio<2){\n        color = \"#cc6600\";\n    }\n    if(ratio<1){\n        color = \"#ff0000\";\n    }\n\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n\n              {props.tweet && <h5 className=\"card-title\"><span style={{color: `#808080`}}>Tweet - </span>{props.tweet.tweet}</h5>}\n              {props.tweet && <hr/>}\n              {props.tweet && <p className=\"card-text\"><span style={{color: `${color}`}}>{ `Likes/Views - ${ratio}% | Replies/Views - ${ratio1}% `}</span> { ` | Views - ${props.tweet.impression_count} | Likes - ${props.tweet.like_count} | Replies - ${props.tweet.reply_count} | Retweets - ${props.tweet.retweet_count} | Q Tweets - ${props.tweet.quote_count}`}</p>}\n               {props.tweet.tweetSentiment &&  <h6 className=\"card-text\">{`New Tweet for you - ${props.tweet.tweetSentiment}`}</h6>}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet for you </span></h6>} */}\n               {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet by AI - </span>{`  ${props.tweet.newtweet}`}</h6>}\n               {props.tweet.newtweet && <button className=\"copybutton\" onClick={() => {navigator.clipboard.writeText(props.tweet.newtweet);}}>Copy Tweet</button>}\n               <br/>\n               <br/>\n               <br/>\n               {props.tweet &&<a href={`${props.tweet.tweetID}`} target=\"_blank\" rel=\"noreferrer\">View this Tweet by {`${props.tweet.TwitteruserFullName} on Twitter`}</a>} \n\n            </div>\n            {/* {ratio>1 &&  <h2 className='card-title'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">BUILD & MONETIZE YOUR TWITTER AUDIENCE. FAST. Click here</a></h2>} */}\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport { Helmet } from 'react-helmet';\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Tweets = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t\n\t// useEffect(() => {\n\t// \tconst token = localStorage.getItem('token')\n\t\t\n\t// \t// https://mudit.hashnode.dev/5-things-you-should-know-about-useeffect\n\t// \tif (token) {\n\t// \t\tconst user = jwt.decode(token)\n\t// \t\tif (!user) {\n\t// \t\t\tconsole.log('no user')\n\t// \t\t\tlocalStorage.removeItem('token')\n\t// \t\t\thistory.replace('/login')\n\t\t\t\t\n\t// \t\t} else {\n\t// \t\t\t// populateQuote()do something //cleanup function\n\t// \t\t\t// console.log('user is ', user)\n\t// \t\t}\n\t// \t}else{\n\t// \t\thistory.replace('/login')\n\t// \t}\n\n\t// },[])\n\tuseEffect(() => {\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"handle\", handle)\n\t\t} else {\n\t\t  params.delete(\"handle\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/tweets`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\t// console.log('data is ', data.error)\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\ttweetSentiment: data.tweets[i].tweetSentiment,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\tnewtweet: data.tweets[i].newtweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetUserName(userName => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\t\n\t\t\t\t\n              }\n\t\t\t  ReactGA.event({\n\t\t\t\tcategory: 'Tweets',\n\t\t\t\taction: 'An AI Tweet Generated'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst handleClick = event => {\n\n\t\tconsole.log('button disabled');\n\t  };\n\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Analyse user's last few Tweets, and write new Tweets in the same style</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2 className='mainsubtitle'><a href=\"/\">See Examples here</a></h2>\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h5>Analysis and new Tweet genaration may take few seconds..Please wait..</h5>}\n\t\t\t<br/>\n\t\t\t{disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>}\n\t\t\t<br/>\n\t\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t{/* {handle && <h6><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h6>} */}\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\t\t\n\t\t<Helmet>\n          {handle && <title>{`Twitter @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t</Helmet>\n\n\t\t</div>\n\t)\n}\n\nexport default Tweets\n\n","import React, { useEffect, useState } from 'react'\n// import jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport NavBar from './Navbar';\nimport { Helmet } from 'react-helmet';\n\n\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\n\nconst Examples = () => {\n\t// const history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\t// const [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState(\"\");\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\tconst history = useHistory()\n\n\t// useEffect(() => {\n\t// \t// const token = localStorage.getItem('token')\n\t\t\n\t// \tGetTweets();\n\t// \t// if (token) {\n\t// \t// \tconst user = jwt.decode(token)\n\t// \t// \tif (!user) {\n\t// \t// \t\tconsole.log('no user')\n\t// \t// \t\tlocalStorage.removeItem('token')\n\t// \t// \t\thistory.replace('/login')\n\t\t\t\t\n\t// \t// \t} else {\n\t// \t// \t\t// populateQuote()do something\n\t// \t// \t\t// console.log('user is ', user)\n\t// \t// \t}\n\t// \t// }else{\n\t// \t// \thistory.replace('/login')\n\t// \t// }\n\n\t// }), []\n\n\t//update the url after every new handle\n\tuseEffect(() => {\n\t\tconst params = new URLSearchParams()\n\t\tif (handle) {\n\t\t  params.append(\"handle\", handle)\n\t\t} else {\n\t\t  params.delete(\"handle\")\n\t\t}\n\t\thistory.push({search: params.toString()})\n\t  }, [handle, history])\n\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetErrormessage(errormessage => \"\");\n\t\t\n\t\tconst req = await fetch(`${baseURL}/api/examples`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\t\t\t\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\t\tsetTweets(tweets => []); //clear them first\n\t\t\t\tsetUserName(userName => \"\");\n\t\t\t\tsetHandle(handle => \"\");\n\n\t\t\tfor (let i=0;i<data.tweets.AllAboutTweetsArray.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\ttweetID: data.tweets.AllAboutTweetsArray[i].tweetID,\n\t\t\t\t\ttweet: data.tweets.AllAboutTweetsArray[i].tweet,\n\t\t\t\t\ttweetSentiment: data.tweets.AllAboutTweetsArray[i].tweetSentiment,\n\t\t\t\t\timpression_count: data.tweets.AllAboutTweetsArray[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets.AllAboutTweetsArray[i].like_count,\n\t\t\t\t\treply_count: data.tweets.AllAboutTweetsArray[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets.AllAboutTweetsArray[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets.AllAboutTweetsArray[i].retweet_count,\n\t\t\t\t\tnewtweet: data.tweets.AllAboutTweetsArray[i].newtweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets.AllAboutTweetsArray[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets.TwitteruserName,\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n            }\n\t\t\t\tsetHandle(handle => data.tweets.TwitteruserName);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsetUserName(userName => data.tweets.AllAboutTweetsArray[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\n\t\t\t\t\n\n\t\t\tReactGA.event({\n\t\t\t\tcategory: 'Examples',\n\t\t\t\taction: 'An Example Viewed'\n\t\t\t  });\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on examples page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\n\t\t  \n\t}\n\n\t\n\n\treturn (\n\t\t\n\t\t<div className='tweetdiv'>\n\t\t\t{/* <NavBar sticky=\"top\" /> */}\n\t\t<div className='header'>\n\t\t\t<br/>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Analyse user's last few Tweets, and write new Tweets in the same style</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `      Analysing...      ` : `  Show  Examples   ` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h5>Analysis and new Tweet genaration may take few seconds..Please wait..</h5>}\n\t\t\t{!disable && <h5>Click again to see another example</h5>}\n\t\t\t{/* {!handle && <h6>Please wait..</h6>} */}\n\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t\n\t\t\t<h2 className='mainsubtitle'><a href=\"/tweets\">Analyse other Twitter accounts here</a></h2>\n\t\t\t{handle && <h4 className=\"mainsubtitle\">{`@${handle} (${userName})`}</h4>}\n\t\t\t\n\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t{handle &&  <h4 className='mainsubtitleads'><a target=\"_blank\" href=\"mailto:learn@dictionaryv2.com\">We CREATE a custom AI model on your/any account's Tweets, to generate high quality Tweets like you/them. Click to send us email</a></h4>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"http://tweethunter.io/?via=vivek\">To BUILD & MONETIZE YOUR TWITTER AUDIENCE... FAST. Click here.</a></h2>}\n\t\t\t{handle &&  <h2 className='mainsubtitleads'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">Follow us on Twitter</a></h2>}\n\n\t\t<Helmet>\n          {handle && <title>{`Twitter @${handle}`}</title>}\n\t\t  <meta charSet=\"utf-8\" />\n\t\t </Helmet>\n\t\t \n\t\t</div>\n\t)\n}\n\nexport default Examples\n\n","import React from \"react\";\n\n\nexport default function AdminCard(props) {\n\n\n\n    return (\n        <div className=\"admincard\">\n            <div className=\"admincard-body\">\n\n              {props.admin && <h5 className=\"card-text\"><span style={{color: `#808080`}}>  </span>{props.admin}</h5>}\n              \n\n            </div>\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport AdminCard from './AdminCard'\nimport ReactGA from 'react-ga';\nrequire('dotenv').config();\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Admin = () => {\n\tconst history = useHistory()\n\tconst [admin, setAdmin] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [length, setLength] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t\n\n\n\t// useEffect(() => {\n\t// \tconst token = localStorage.getItem('token')\n\t\t\n\t// \t// https://mudit.hashnode.dev/5-things-you-should-know-about-useeffect\n\t// \tif (token) {\n\t// \t\tconst user = jwt.decode(token)\n\t// \t\tif (!user) {\n\t// \t\t\tconsole.log('no user')\n\t// \t\t\tlocalStorage.removeItem('token')\n\t// \t\t\thistory.replace('/login')\n\t\t\t\t\n\t// \t\t} else {\n\t// \t\t\t// populateQuote()do something //cleanup function\n\t// \t\t\t// console.log('user is ', user)\n\t// \t\t}\n\t// \t}else{\n\t// \t\thistory.replace('/login')\n\t// \t}\n\n\t// },[])\n\n\tasync function Admin(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetAdmin(admin => []);\n\t\tsetLength(length => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/admin`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\tsetAdmin(admin => []); //clear them first\n\t\t\tsetLength(length => \"\");\n\t\t\tsetHandle(handle => \"\");\n\n\t\tfor (let i=0;i<data.AdminArray.length;i++){ \n\t\t\n\t\t\tsetAdmin(prevArray => [...prevArray, data.AdminArray[i]])\n\t\t\tsetDisable(false);\n\t\t}\n\t\tsetLength(length => data.AdminArray.length);\n\n\n\t\tReactGA.event({\n\t\t\tcategory: 'Admin',\n\t\t\taction: 'Admin Page Viewed'\n\t\t  });\n\t}  \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(errormessage => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Admin page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst handleClick = event => {\n\n\t\tconsole.log('button disabled');\n\t  };\n\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='maintitle'>GALAXZ AI</h1>\n\t\t\t<h2 className='mainsubtitle'>Admin</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t<form onSubmit={Admin}>\n\t\t\t\t{/* <input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/> */}\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{length && <h4 className=\"mainsubtitle\">{`Total records - ${length}`}</h4>}\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t{admin.map((admin,index) => {\n\t\t\t\treturn <AdminCard \n\t\t\t\tadmin={admin}  key={index}\n\t\t\t\tonChange={setAdmin}\n\t\t\t\t/>\n\t\t\t})}\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Admin\n\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n// import Login from './pages/Login'\n// import Register from './pages/Register'\nimport Tweets from './pages/Tweets'\nimport Examples from './pages/Examples'\nimport Admin from './pages/Admin'\n\nimport ReactGA from 'react-ga';\nconst MEASUREMENT_ID = \"G-N2T7DHCCBJ\"; // YOUR_OWN_TRACKING_ID\nconst TRACKIING_ID = \"UA-250139782-1\";\nReactGA.initialize(TRACKIING_ID);\n\n\n\nconst App = () => {\n\treturn (\n\t\t<div className='maindiv'>\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* <Route path=\"/login\" exact component={Login} /> */}\n\t\t\t\t{/* <Route path=\"/register\" exact component={Register} /> */}\n\t\t\t\t<Route path=\"/tweets\" exact component={Tweets} />\n\t\t\t\t<Route path=\"/admin\" exact component={Admin} />\n\t\t\t\t<Route path=\"/\" exact component={Examples} />\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}