{"version":3,"sources":["pages/Login.js","pages/Register.js","pages/Card.js","pages/Tweets.js","pages/Examples.js","App.js","index.js"],"names":["require","config","App","Card","props","ratio","tweet","like_count","impression_count","toFixed","ratio1","reply_count","color","className","style","retweet_count","quote_count","tweetSentiment","newtweet","onClick","navigator","clipboard","writeText","href","tweetID","target","rel","TwitteruserFullName","baseURL","process","Tweets","useHistory","useState","tweets","setTweets","twitterUserID","settwitterUserID","React","disable","setDisable","handle","setHandle","userName","setUserName","errormessage","setErrormessage","event","preventDefault","fetch","method","headers","localStorage","getItem","body","JSON","stringify","tweeterUserHadleToPullTweets","req","json","data","status","obj","i","prevArray","ReactGA","category","action","length","error","exception","description","fatal","onSubmit","type","maxLength","required","placeholder","onChange","e","value","disabled","map","index","Examples","AllAboutTweetsArray","TwitteruserName","initialize","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6eea1d0.chunk.js","sourcesContent":["import { useState } from 'react'\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nfunction App() {\n\tconst [email, setEmail] = useState('')\n\tconst [password, setPassword] = useState('')\n\t\n\n\tasync function loginUser(event) {\n\t\tevent.preventDefault()\n\n\t\tconst response = await fetch(`${baseURL}/api/login`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t}),\n\t\t})\n\n\t\tconst data = await response.json()\n\n\t\tif (data.user) {\n\t\t\tlocalStorage.setItem('token', data.user)\n\t\t\t// alert('Login successful')\n\t\t\twindow.location.href = '/tweets'\n\t\t} else {\n\t\t\talert('Please check your username and password')\n\t\t}\n\t\t\n\t\t\n\t\n\t}\n\n\treturn (\n\t\t<div className='logindiv'>\n\t\t\t<h1>GalaxzAI Login</h1>\n\t\t\t<form onSubmit={loginUser} className=\"formlogin\">\n\t\t\t\t<input \n\t\t\t\tclassName='emaillogin'\n\t\t\t\t\tvalue={email}\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\tclassName='emaillogin'\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input className='button' type=\"submit\" value=\"Login\" />\n\t\t\t\t<br/>\n\t\t\t\t<a rel=\"noopener noreferrer\" href=\"register\">New here! Register</a>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nfunction App() {\n\tconst history = useHistory()\n\n\tconst [name, setName] = useState('')\n\tconst [email, setEmail] = useState('')\n\tconst [password, setPassword] = useState('')\n\n\t//this funtion is communicating with backend\n\tasync function registerUser(event) {\n\t\tevent.preventDefault() // to prevent page refresh on submit as form is inside div\n\n\t\t//this funtion is communicating with backend\n\t\t//server folder , index.js file has this route /api/register\n\t\tconst response = await fetch(`${baseURL}/api/register`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname,\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t}),\n\t\t})\n\n\t\tconst data = await response.json() //response from server will be ok or error\n\n\t\tif (data.status === 'ok') {\n\t\t\thistory.push('/login') // if response is ok then redirect to login page\n\t\t}\n\t\telse {\n\t\t\talert('You are already registered! Login now')\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='registerdiv'>\n\t\t\t<h1>GalaxzAI Register</h1>\n\t\t\t<form className='registerform' onSubmit={registerUser}>\n\t\t\t\t<input className='registerinput'\n\t\t\t\trequired\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input className='registerinput'\n\t\t\t\trequired\n\t\t\t\t\tvalue={email}\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input className='registerinput'\n\t\t\t\trequired\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<input className='button' type=\"submit\" value=\"Register\" />\n\t\t\t\t<br/>\n\t\t\t\t<a rel=\"noopener noreferrer\" href=\"login\">Already User! Login</a>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from \"react\";\n\n\nexport default function Card(props) {\n\n    let ratio = ((props.tweet.like_count/props.tweet.impression_count)*100).toFixed(2);\n    let ratio1 = ((props.tweet.reply_count/props.tweet.impression_count)*100).toFixed(2);\n    let color = \"#38761d\";\n\n    if(ratio>2){\n        color = \"#6aa84f\";\n    }\n    if(ratio>=1 && ratio<2){\n        color = \"#cc6600\";\n    }\n    if(ratio<1){\n        color = \"#ff0000\";\n    }\n\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n\n              {props.tweet && <h5 className=\"card-title\"><span style={{color: `#808080`}}>Tweet - </span>{props.tweet.tweet}</h5>}\n              {props.tweet && <hr/>}\n              {props.tweet && <p className=\"card-text\"><span style={{color: `${color}`}}>{ `Likes/Views - ${ratio}% | Replies/Views - ${ratio1}% `}</span> { ` | Views - ${props.tweet.impression_count} | Likes - ${props.tweet.like_count} | Replies - ${props.tweet.reply_count} | Retweets - ${props.tweet.retweet_count} | Q Tweets - ${props.tweet.quote_count}`}</p>}\n               {props.tweet.tweetSentiment &&  <h6 className=\"card-text\">{`New Tweet for you - ${props.tweet.tweetSentiment}`}</h6>}\n               {/* {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet for you </span></h6>} */}\n               {props.tweet.newtweet &&  <h6 className=\"card-text\"><span style={{color: `#808080`}}>Tweet by AI - </span>{`  ${props.tweet.newtweet}`}</h6>}\n               {props.tweet.newtweet && <button className=\"copybutton\" onClick={() => {navigator.clipboard.writeText(props.tweet.newtweet);}}>Copy Tweet</button>}\n               <br/>\n               <br/>\n               <br/>\n               {props.tweet &&<a href={`${props.tweet.tweetID}`} target=\"_blank\" rel=\"noreferrer\">View this Tweet by {`${props.tweet.TwitteruserFullName} on Twitter`}</a>} \n\n            </div>\n        </div>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nrequire('dotenv').config();\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\nconst Tweets = () => {\n\tconst history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\tconst [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t\n\n\n\t// useEffect(() => {\n\t// \tconst token = localStorage.getItem('token')\n\t\t\n\t// \t// https://mudit.hashnode.dev/5-things-you-should-know-about-useeffect\n\t// \tif (token) {\n\t// \t\tconst user = jwt.decode(token)\n\t// \t\tif (!user) {\n\t// \t\t\tconsole.log('no user')\n\t// \t\t\tlocalStorage.removeItem('token')\n\t// \t\t\thistory.replace('/login')\n\t\t\t\t\n\t// \t\t} else {\n\t// \t\t\t// populateQuote()do something //cleanup function\n\t// \t\t\t// console.log('user is ', user)\n\t// \t\t}\n\t// \t}else{\n\t// \t\thistory.replace('/login')\n\t// \t}\n\n\t// },[])\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetTweets(tweets => []);\n\t\tsetUserName(userName => \"\");\n\t\tsetHandle(handle => \"\");\n\t\tsetErrormessage(errormessage => \"\");\n\n\t\tconst req = await fetch(`${baseURL}/api/tweets`, {\n\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\t// console.log('data is ', data.error)\n\t\t\tfor (let i=0;i<data.tweets.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\ttweetID: data.tweets[i].tweetID,\n\t\t\t\t\ttweet: data.tweets[i].tweet,\n\t\t\t\t\ttweetSentiment: data.tweets[i].tweetSentiment,\n\t\t\t\t\timpression_count: data.tweets[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets[i].like_count,\n\t\t\t\t\treply_count: data.tweets[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets[i].retweet_count,\n\t\t\t\t\tnewtweet: data.tweets[i].newtweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets[i].TwitteruserFullName,\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetUserName(userName => data.tweets[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\n\n\t\t\t\tReactGA.event({\n\t\t\t\t\tcategory: 'Tweets',\n\t\t\t\t\taction: 'An AI Tweet Generated'\n\t\t\t\t  });\n\t\t\t\t\n\t\t\t\t\n              }\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on Tweets page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t}\n\t}\n\n\tconst handleClick = event => {\n\n\t\tconsole.log('button disabled');\n\t  };\n\n\treturn (\n\t\t<div className='tweetdiv'>\n\t\t<div className='header'>\n\t\t\t<h1 className='title'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">GALAXZ AI</a></h1>\n\t\t\t<h2 className='title'>Analyse user's Tweets, and write new Tweets in the same style</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\n\t\t\t <h2><a target=\"_blank\" href=\"/\">See Examples here</a></h2>\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName='userIdTextBox'\n\t\t\t\t\tmaxLength={70}\n\t\t\t\t\trequired\n\t\t\t\t\tplaceholder=\"Twitter User handle without @\"\n\t\t\t\t\tonChange={(e) => settwitterUserID(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `Analysing...` : `Get Analysis` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\t\t\t{disable && <h5>Analysis and new Tweet genaration may take few seconds..Please wait..</h5>}\n\t\t\t<br/>\n\t\t\t{disable && <h5><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h5>}\n\t\t\t<br/>\n\t\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t{/* {handle && <h6><a href=\"mailto:learn@dictionaryv2.com\">Send us feedback at learn@dictionaryv2.com</a></h6>} */}\n\t\t\t{handle && <h4 className=\"card-title\">{`@${handle} (${userName})`}</h4>}\n\t\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t\n\n\t\t</div>\n\t)\n}\n\nexport default Tweets\n\n","import React, { useEffect, useState } from 'react'\n// import jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\nimport Card from './Card'\nimport ReactGA from 'react-ga';\nimport NavBar from './Navbar'\nrequire('dotenv').config();\n\n\nconst baseURL = process.env.REACT_APP_BASE_URL\n\n\nconst Examples = () => {\n\t// const history = useHistory()\n\tconst [tweets, setTweets] = useState([])\n\t// const [twitterUserID, settwitterUserID] = useState('')\n\tconst [disable, setDisable] = React.useState(false);\n\tconst [handle, setHandle] = React.useState();\n\tconst [userName, setUserName] = React.useState();\n\tconst [errormessage, setErrormessage] = React.useState();\n\n\t// useEffect(() => {\n\t// \t// const token = localStorage.getItem('token')\n\t\t\n\t// \tGetTweets();\n\t// \t// if (token) {\n\t// \t// \tconst user = jwt.decode(token)\n\t// \t// \tif (!user) {\n\t// \t// \t\tconsole.log('no user')\n\t// \t// \t\tlocalStorage.removeItem('token')\n\t// \t// \t\thistory.replace('/login')\n\t\t\t\t\n\t// \t// \t} else {\n\t// \t// \t\t// populateQuote()do something\n\t// \t// \t\t// console.log('user is ', user)\n\t// \t// \t}\n\t// \t// }else{\n\t// \t// \thistory.replace('/login')\n\t// \t// }\n\n\t// }), []\n\n\tasync function GetTweets(event) {\n\t\tevent.preventDefault()\n\t\tsetDisable(true);\n\t\tsetErrormessage(errormessage => \"\");\n\t\t\n\t\t\n\n\t\tconst req = await fetch(`${baseURL}/api/examples`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t// tweeterUserHadleToPullTweets: twitterUserID,\n\t\t\t}),\n\t\t\t\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\n\t\t\t\tsetTweets(tweets => []); //clear them first\n\t\t\t\tsetUserName(userName => \"\");\n\t\t\t\tsetHandle(handle => \"\");\n\n\t\t\tfor (let i=0;i<data.tweets.AllAboutTweetsArray.length;i++){ \n\n\t\t\t\tconst obj = {\n\t\t\t\t\ttweetID: data.tweets.AllAboutTweetsArray[i].tweetID,\n\t\t\t\t\ttweet: data.tweets.AllAboutTweetsArray[i].tweet,\n\t\t\t\t\ttweetSentiment: data.tweets.AllAboutTweetsArray[i].tweetSentiment,\n\t\t\t\t\timpression_count: data.tweets.AllAboutTweetsArray[i].impression_count,\n\t\t\t\t\tlike_count: data.tweets.AllAboutTweetsArray[i].like_count,\n\t\t\t\t\treply_count: data.tweets.AllAboutTweetsArray[i].reply_count,\n\t\t\t\t\tquote_count: data.tweets.AllAboutTweetsArray[i].quote_count,\n\t\t\t\t\tretweet_count: data.tweets.AllAboutTweetsArray[i].retweet_count,\n\t\t\t\t\tnewtweet: data.tweets.AllAboutTweetsArray[i].newtweet,\n\t\t\t\t\tTwitteruserFullName: data.tweets.AllAboutTweetsArray[i].TwitteruserFullName,\n\t\t\t\t\tTwitteruserName: data.tweets.TwitteruserName,\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tsetTweets(prevArray => [...prevArray, obj])\n\t\t\t\t\n\t\t\t\tsetHandle(handle => data.tweets.TwitteruserName);\n\t\t\t\tsetUserName(userName => data.tweets.AllAboutTweetsArray[0].TwitteruserFullName);\n\t\t\t\tsetDisable(false);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tReactGA.event({\n\t\t\t\t\tcategory: 'Examples',\n\t\t\t\t\taction: 'An Example Viewed'\n\t\t\t\t  });\n              }\n\t\t} \n\t\telse if(data.status === 'error'){\n\t\t\tsetDisable(false);\n\t\t\tsetErrormessage(userName => data.error);\n\t\t\tReactGA.exception({\n\t\t\t\tdescription: 'An error ocurred on examples page',\n\t\t\t\tfatal: true\n\t\t\t  });\n\t\t\t\n\t\t}\n\t}\n\n\t\n\n\treturn (\n\t\t\n\t\t<div className='tweetdiv'>\n\t\t\t{/* <NavBar sticky=\"top\" /> */}\n\t\t<div className='header'>\n\t\t\t<br/>\n\t\t\t<h1 className='title'><a target=\"_blank\" href=\"https://twitter.com/galaxz_AI\">GALAXZ AI</a></h1>\n\t\t\t<h2 className='title'>Analyse user's last few Tweets, and write new Tweets in the same style</h2>\n\t\t\t {errormessage && <h4 className=\"errormessage\">{`${errormessage}`}</h4>}\n\t\t\t<form onSubmit={GetTweets}>\n\t\t\t\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" className='button' value={disable ? `      Analysing...      ` : `  Show  Examples   ` } disabled={disable}/>\n\t\t\t\t\n\t\t\t</form>\n\n\t\t\t{handle && <h5>Click again to see another example</h5>}\n\t\t\t{/* {!handle && <h6>Please wait..</h6>} */}\n\t\t\t{/* <h4>Need a similar report (on 500 Tweets) for any Twitter account? <a href=\"mailto:learn@dictionaryv2.com\">Email us at learn@dictionaryv2.com</a></h4> */}\n\t\t\t\n\t\t\t<h2 className='title1'><a target=\"_blank\" href=\"/tweets\">Analyse other Twitter accounts here</a></h2>\n\t\t\t{handle && <h4 className=\"card-title\">{`@${handle} (${userName})`}</h4>}\n\t\t\t\n\t\t</div>\n\t\t\t{/* {handle && <h6>Sorted by Likes/Views%</h6>} */}\n\n\t\t\n\t\t\t{tweets.map((tweet,index) => {\n\t\t\t\treturn <Card \n\t\t\t\ttweet={tweet}  key={index}\n\t\t\t\tonChange={setTweets}\n\t\t\t\t/>\n\t\t\t})}\n\t\t\t\n\n\t\t</div>\n\t)\n}\n\nexport default Examples\n\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport Tweets from './pages/Tweets'\nimport Examples from './pages/Examples'\n\nimport ReactGA from 'react-ga';\nconst MEASUREMENT_ID = \"G-N2T7DHCCBJ\"; // YOUR_OWN_TRACKING_ID\nReactGA.initialize(MEASUREMENT_ID);\n\n\n\nconst App = () => {\n\treturn (\n\t\t<div className='maindiv'>\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* <Route path=\"/login\" exact component={Login} /> */}\n\t\t\t\t{/* <Route path=\"/register\" exact component={Register} /> */}\n\t\t\t\t<Route path=\"/tweets\" exact component={Tweets} />\n\t\t\t\t<Route path=\"/\" exact component={Examples} />\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}